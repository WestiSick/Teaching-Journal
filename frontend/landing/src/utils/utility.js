// frontend/landing/src/utils/utility.js

// This function handles sending form data to Telegram
export async function sendToTelegram(formData) {
    const BOT_TOKEN = '8024259896:AAHR1cNJoJRbxRI1hWAfvILeafyevRSpRDA';

    try {
        // First, we need to get the chat_id of the bot owner/admin
        // We'll use getUpdates to find any chats the bot is in
        const updatesResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getUpdates`);
        const updatesData = await updatesResponse.json();

        // If there are no updates, we need the bot owner to send at least one message to the bot
        if (!updatesData.ok || !updatesData.result || updatesData.result.length === 0) {
            return {
                success: false,
                message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –≤ Telegram, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –∑–∞—è–≤–∫–∏."
            };
        }

        // Get the most recent chat_id from updates
        // This should be the bot owner's chat
        const chatId = updatesData.result[0].message.chat.id;

        // Format the message text
        const messageText = `
üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞* üîî

*–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ:* ${formData.institution}
*–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:* ${formData.contactPerson}
*Email:* ${formData.email}
*–¢–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:* ${formData.institutionType}
    `;

        // Send the message to Telegram
        const sendResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: chatId,
                text: messageText,
                parse_mode: 'Markdown'
            }),
        });

        const sendData = await sendResponse.json();

        if (sendData.ok) {
            return {
                success: true,
                message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            };
        } else {
            console.error("Telegram API error:", sendData);
            return {
                success: false,
                message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            };
        }
    } catch (error) {
        console.error("Error sending to Telegram:", error);
        return {
            success: false,
            message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        };
    }
}

// Validate form data - returns error message or null if valid
export function validateFormData(formData) {
    if (!formData.institution.trim()) {
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è";
    }

    if (!formData.contactPerson.trim()) {
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞";
    }

    if (!formData.email.trim()) {
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É";
    }

    // Simple email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) {
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã";
    }

    if (!formData.institutionType) {
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è";
    }

    return null; // No errors
}