name: Deploy to Server

on:
  push:
    branches: [ master ]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy via SSH and Docker Compose
    runs-on: ubuntu-latest

    env:
      DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
      REPO_URL: ${{ secrets.REPO_URL != '' && secrets.REPO_URL || format('https://github.com/{0}.git', github.repository) }}
      GIT_AUTH_TOKEN: ${{ secrets.GIT_AUTH_TOKEN }}
      SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}

    steps:
      - name: Checkout repository (for metadata only)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sync code on server (git clone/pull)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          envs: DEPLOY_PATH,REPO_URL,GIT_AUTH_TOKEN
          script: |
            set -euo pipefail

            # ensure git exists
            if ! command -v git >/dev/null 2>&1; then
              echo "Git is not installed. Attempting to install..."
              if command -v apt-get >/dev/null 2>&1; then
                sudo apt-get update -y && sudo apt-get install -y git
              elif command -v yum >/dev/null 2>&1; then
                sudo yum install -y git
              else
                echo "Unsupported package manager. Please install git manually." >&2
                exit 1
              fi
            fi

            # build authenticated URL if token is provided
            AUTH_REPO_URL="$REPO_URL"
            if [ -n "${GIT_AUTH_TOKEN:-}" ]; then
              AUTH_REPO_URL=$(echo "$REPO_URL" | sed -E "s#^https://#https://${GIT_AUTH_TOKEN}@#")
            fi

            echo "Repo URL: $REPO_URL"
            echo "Preparing deploy directory: $DEPLOY_PATH"

            if [ -d "$DEPLOY_PATH/.git" ]; then
              cd "$DEPLOY_PATH"
              # update remote url temporarily if token provided
              if [ -n "${GIT_AUTH_TOKEN:-}" ]; then
                git remote set-url origin "$AUTH_REPO_URL"
              fi
              git fetch --all --prune
              git reset --hard origin/master
            else
              rm -rf "$DEPLOY_PATH"
              mkdir -p "$(dirname "$DEPLOY_PATH")"
              git clone --branch master --single-branch "$AUTH_REPO_URL" "$DEPLOY_PATH"
            fi

      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          envs: DEPLOY_PATH,SUDO_PASSWORD
          script: |
            set -euo pipefail

            # detect compose command (no daemon permission needed here)
            if docker compose version >/dev/null 2>&1; then
              COMPOSE_CMD="docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              COMPOSE_CMD="docker-compose"
            else
              echo "Docker Compose not installed" >&2
              exit 1
            fi

            # choose privilege mode for docker access
            SUDO_MODE="none"
            if docker ps >/dev/null 2>&1; then
              SUDO_MODE="none"
            elif command -v sudo >/dev/null 2>&1 && sudo -n docker ps >/dev/null 2>&1; then
              SUDO_MODE="sudo"
            elif command -v sudo >/dev/null 2>&1 && [ -n "${SUDO_PASSWORD:-}" ]; then
              if echo "$SUDO_PASSWORD" | sudo -S docker ps >/dev/null 2>&1; then
                SUDO_MODE="password"
              fi
            fi

            run_cmd() {
              CMD="$1"
              case "$SUDO_MODE" in
                none)      sh -lc "$CMD" ;;
                sudo)      sudo sh -lc "$CMD" ;;
                password)  echo "$SUDO_PASSWORD" | sudo -S sh -lc "$CMD" ;;
                *)         sh -lc "$CMD" ;;
              esac
            }

            if [ "$SUDO_MODE" = "none" ]; then
              echo "Docker access: direct"
            elif [ "$SUDO_MODE" = "sudo" ]; then
              echo "Docker access: sudo (passwordless)"
            elif [ "$SUDO_MODE" = "password" ]; then
              echo "Docker access: sudo (with password)"
            else
              echo "No permission to access Docker daemon. Add user to 'docker' group or provide SUDO_PASSWORD secret." >&2
              exit 1
            fi

            cd "$DEPLOY_PATH"
            echo "Working directory: $(pwd)"

            export DOCKER_BUILDKIT=1
            run_cmd "$COMPOSE_CMD -f docker-compose.yml up -d --build --remove-orphans"

            echo "Currently running containers:"
            run_cmd "$COMPOSE_CMD ps"

            # optional cleanup of dangling images
            run_cmd "docker image prune -f || true"
