name: Deploy to Production

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - 'docs/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.filter.outputs.backend }}
      dashboard_frontend_changed: ${{ steps.filter.outputs.dashboard_frontend }}
      landing_frontend_changed: ${{ steps.filter.outputs.landing_frontend }}
      docker_configs_changed: ${{ steps.filter.outputs.docker_configs }}
      nginx_configs_changed: ${{ steps.filter.outputs.nginx_configs }}
      dashboard_service: ${{ steps.detect-backend.outputs.dashboard_service }}
      schedule_service: ${{ steps.detect-backend.outputs.schedule_service }}
      ticket_service: ${{ steps.detect-backend.outputs.ticket_service }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Необходимо для сравнения изменений

      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'app/**/*.go'
              - 'go.mod'
              - 'go.sum'
            dashboard_frontend:
              - 'frontend/dashboard/**'
            landing_frontend:
              - 'frontend/landing/**'
            docker_configs:
              - 'docker/**'
              - 'docker-compose.yml'
            nginx_configs:
              - 'docker/nginx/**'

      - name: Detect specific backend service changes
        id: detect-backend
        if: steps.filter.outputs.backend == 'true'
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "app/dashboard/"; then
            echo "dashboard_service=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "app/schedule/"; then
            echo "schedule_service=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "app/tickets/"; then
            echo "ticket_service=true" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment script
        run: |
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          set -e

          # Проверка существования директории проекта
          if [ ! -d "$SERVER_PATH" ]; then
            echo "Creating project directory..."
            mkdir -p "$SERVER_PATH"
          fi

          cd "$SERVER_PATH"

          # Проверка и инициализация git репозитория
          if [ ! -d ".git" ]; then
            echo "Initializing git repository..."
            git init
            git remote add origin "https://github.com/$GITHUB_REPOSITORY.git"
          fi

          # Проверка удаленного репозитория
          REMOTE_URL=$(git remote get-url origin 2>/dev/null || echo "")
          if [ "$REMOTE_URL" != "https://github.com/$GITHUB_REPOSITORY.git" ]; then
            echo "Updating remote URL..."
            git remote set-url origin "https://github.com/$GITHUB_REPOSITORY.git" || git remote add origin "https://github.com/$GITHUB_REPOSITORY.git"
          fi

          # Получаем последнюю версию кода
          echo "Fetching latest code..."
          git fetch origin

          # Проверяем, есть ли локальная ветка master
          if ! git rev-parse --verify master >/dev/null 2>&1; then
            echo "Creating local branch: master"
            git checkout -b master origin/master
          else
            echo "Checking out local branch: master"
            git checkout master
          fi

          # Сохраняем текущую версию кода
          CURRENT_COMMIT=$(git rev-parse HEAD || echo "initial")

          # Обновляем код из репозитория
          echo "Updating code..."
          git pull origin master

          # Проверяем наличие docker-compose.yml
          if [ ! -f "docker-compose.yml" ]; then
            echo "Error: docker-compose.yml not found in project directory!"
            exit 1
          fi

          # Функция безопасного перезапуска сервиса
          safe_restart_service() {
            local service=$1
            echo "Safely restarting service: $service"
          
            # Проверяем существование контейнера
            if docker-compose ps -q "$service" > /dev/null 2>&1; then
              echo "Stopping and removing existing container..."
              # Останавливаем и удаляем контейнер, игнорируя ошибки
              docker-compose stop "$service" || true
              docker-compose rm -f "$service" || true
            fi
          
            # Принудительно удаляем контейнер, если он все еще существует
            CONTAINER_NAME="teacher_journal_${service}"
            if docker ps -a -q --filter "name=$CONTAINER_NAME" | grep -q .; then
              echo "Forcing removal of container $CONTAINER_NAME..."
              docker rm -f "$CONTAINER_NAME" || true
            fi
          
            # Пересоздаем контейнер
            echo "Rebuilding and starting container..."
            docker-compose up -d --build "$service"
          
            # Проверяем статус
            if [ $? -eq 0 ]; then
              echo "✅ Service $service successfully restarted"
            else
              echo "❌ Failed to restart service $service"
              # Дополнительная отладочная информация
              echo "Showing Docker Compose logs for service $service:"
              docker-compose logs --tail=50 "$service"
              return 1
            fi
          }

          # Если изменились конфигурации Docker, перезапускаем все сервисы с полной очисткой
          if [ "$DOCKER_CONFIGS_CHANGED" = "true" ]; then
            echo "Docker configurations changed, safely rebuilding all services"
          
            # Сохраняем важные данные (если нужно)
            echo "Backing up important data before rebuild..."
          
            # Останавливаем все контейнеры
            docker-compose down --remove-orphans
          
            # Удаляем неиспользуемые образы и объемы, чтобы очистить систему
            docker system prune -f
          
            # Перезапускаем все с чистого листа
            docker-compose up -d --build
          
            echo "All services have been rebuilt and restarted"
            exit 0
          fi

          # Перезапускаем только те сервисы, которые были изменены, используя безопасный метод
          SERVICES_TO_RESTART=""

          # Добавляем сервисы для перезапуска в зависимости от выходных данных предыдущего шага
          if [ "$DASHBOARD_SERVICE" = "true" ]; then
            SERVICES_TO_RESTART="$SERVICES_TO_RESTART api"
          fi

          if [ "$SCHEDULE_SERVICE" = "true" ]; then
            SERVICES_TO_RESTART="$SERVICES_TO_RESTART schedule_api"
          fi

          if [ "$TICKET_SERVICE" = "true" ]; then
            SERVICES_TO_RESTART="$SERVICES_TO_RESTART ticket_api"
          fi

          if [ "$DASHBOARD_FRONTEND_CHANGED" = "true" ]; then
            SERVICES_TO_RESTART="$SERVICES_TO_RESTART dashboard"
          fi

          if [ "$LANDING_FRONTEND_CHANGED" = "true" ]; then
            SERVICES_TO_RESTART="$SERVICES_TO_RESTART landing"
          fi

          if [ "$NGINX_CONFIGS_CHANGED" = "true" ]; then
            SERVICES_TO_RESTART="$SERVICES_TO_RESTART nginx"
          fi

          if [ -n "$SERVICES_TO_RESTART" ]; then
            echo "Restarting services: $SERVICES_TO_RESTART"
          
            # Перезапускаем каждый сервис отдельно
            for service in $SERVICES_TO_RESTART; do
              safe_restart_service "$service"
            done
          else
            echo "No services need to be restarted"
          fi

          echo "Deployment completed successfully!"
          EOL
          
          chmod +x deploy.sh

      - name: Deploy to server
        env:
          SERVER_PATH: ${{ secrets.SERVER_PATH }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          DASHBOARD_SERVICE: ${{ needs.detect-changes.outputs.dashboard_service }}
          SCHEDULE_SERVICE: ${{ needs.detect-changes.outputs.schedule_service }}
          TICKET_SERVICE: ${{ needs.detect-changes.outputs.ticket_service }}
          DASHBOARD_FRONTEND_CHANGED: ${{ needs.detect-changes.outputs.dashboard_frontend_changed }}
          LANDING_FRONTEND_CHANGED: ${{ needs.detect-changes.outputs.landing_frontend_changed }}
          NGINX_CONFIGS_CHANGED: ${{ needs.detect-changes.outputs.nginx_configs_changed }}
          DOCKER_CONFIGS_CHANGED: ${{ needs.detect-changes.outputs.docker_configs_changed }}
        run: |
          # Передаем скрипт на сервер и выполняем его с переменными окружения
          scp deploy.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/deploy.sh
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "export SERVER_PATH='$SERVER_PATH' GITHUB_REPOSITORY='$GITHUB_REPOSITORY' DASHBOARD_SERVICE='$DASHBOARD_SERVICE' SCHEDULE_SERVICE='$SCHEDULE_SERVICE' TICKET_SERVICE='$TICKET_SERVICE' DASHBOARD_FRONTEND_CHANGED='$DASHBOARD_FRONTEND_CHANGED' LANDING_FRONTEND_CHANGED='$LANDING_FRONTEND_CHANGED' NGINX_CONFIGS_CHANGED='$NGINX_CONFIGS_CHANGED' DOCKER_CONFIGS_CHANGED='$DOCKER_CONFIGS_CHANGED' && chmod +x /tmp/deploy.sh && /tmp/deploy.sh"